{
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation[]",
          "name": "userOps",
          "type": "tuple[]"
        }
      ],
      "name": "aggregateSignatures",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "aggregatedSignature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation[]",
          "name": "userOps",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateSignatures",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "validateUserOpSignature",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "sigForUserOp",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": "275e2d79",
    "validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)": "e3563a4f",
    "validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": "64c530cd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"}],\"name\":\"aggregateSignatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregatedSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"validateUserOpSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"sigForUserOp\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"params\":{\"userOps\":\"- Array of UserOperations to collect the signatures from.\"},\"returns\":{\"aggregatedSignature\":\"- The aggregated signature.\"}},\"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)\":{\"params\":{\"signature\":\"- The aggregated signature.\",\"userOps\":\"- Array of UserOperations to validate the signature for.\"}},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"params\":{\"userOp\":\"- The userOperation received from the user.\"},\"returns\":{\"sigForUserOp\":\"- The value to put into the signature field of the userOp when calling handleOps.                        (usually empty, unless account and aggregator support some kind of \\\"multisig\\\".\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"notice\":\"Aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation.\"},\"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)\":{\"notice\":\"Validate aggregated signature. Revert if the aggregated signature does not match the given list of operations.\"},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Validate signature of a single userOp. This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\"}},\"notice\":\"Aggregated Signatures validator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IAggregator.sol\":\"IAggregator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/core/Helpers.sol\":{\"keccak256\":\"0x81b70ea6183fd28e6c00dc3cf357c8453abdd4cc46ec628e7589e4b6a188d626\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://f4a99aced25a842721a2495760af84b874c1f730c94f8b3e76c71c8b757c90f5\",\"dweb:/ipfs/QmacEJqVFbwQxE4HTzqvWWAFT7uSbH2Yd7EMqdCx1DxzBz\"]},\"contracts/interfaces/IAggregator.sol\":{\"keccak256\":\"0xfc37d01c654f967c0f33b0edcb074231d30841f6fe1b23a070564f13c497b111\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://490630958f3a1861ad16db742e891b8c9f6f229a11f942d25ff58e9bab983c37\",\"dweb:/ipfs/QmYcvJxvXrXWvDUp6XZZirzjMqk5BaWdmsWWsEtamiuDu9\"]},\"contracts/interfaces/UserOperation.sol\":{\"keccak256\":\"0xb9778d418650d05b798dd2f1302ffc598411908f80296bb6ff391d0017f2a8bb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d3923a80ad02e77ba413caef2d4f71c7494bf8a3fd5fda753075310dbb9fe4b4\",\"dweb:/ipfs/QmYieD4jEHcbvVrRQPZ5VBScDZfGdeZWbFvkxDhnezNXR1\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "struct UserOperation[]",
              "name": "userOps",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "aggregateSignatures",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "aggregatedSignature",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct UserOperation[]",
              "name": "userOps",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "validateSignatures"
        },
        {
          "inputs": [
            {
              "internalType": "struct UserOperation",
              "name": "userOp",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "validateUserOpSignature",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "sigForUserOp",
              "type": "bytes"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
            "params": {
              "userOps": "- Array of UserOperations to collect the signatures from."
            },
            "returns": {
              "aggregatedSignature": "- The aggregated signature."
            }
          },
          "validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)": {
            "params": {
              "signature": "- The aggregated signature.",
              "userOps": "- Array of UserOperations to validate the signature for."
            }
          },
          "validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
            "params": {
              "userOp": "- The userOperation received from the user."
            },
            "returns": {
              "sigForUserOp": "- The value to put into the signature field of the userOp when calling handleOps.                        (usually empty, unless account and aggregator support some kind of \"multisig\"."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
            "notice": "Aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation."
          },
          "validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)": {
            "notice": "Validate aggregated signature. Revert if the aggregated signature does not match the given list of operations."
          },
          "validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
            "notice": "Validate signature of a single userOp. This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@uniswap/=node_modules/@uniswap/",
        ":base64-sol/=node_modules/base64-sol/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/interfaces/IAggregator.sol": "IAggregator"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/core/Helpers.sol": {
        "keccak256": "0x81b70ea6183fd28e6c00dc3cf357c8453abdd4cc46ec628e7589e4b6a188d626",
        "urls": [
          "bzz-raw://f4a99aced25a842721a2495760af84b874c1f730c94f8b3e76c71c8b757c90f5",
          "dweb:/ipfs/QmacEJqVFbwQxE4HTzqvWWAFT7uSbH2Yd7EMqdCx1DxzBz"
        ],
        "license": "GPL-3.0"
      },
      "contracts/interfaces/IAggregator.sol": {
        "keccak256": "0xfc37d01c654f967c0f33b0edcb074231d30841f6fe1b23a070564f13c497b111",
        "urls": [
          "bzz-raw://490630958f3a1861ad16db742e891b8c9f6f229a11f942d25ff58e9bab983c37",
          "dweb:/ipfs/QmYcvJxvXrXWvDUp6XZZirzjMqk5BaWdmsWWsEtamiuDu9"
        ],
        "license": "GPL-3.0"
      },
      "contracts/interfaces/UserOperation.sol": {
        "keccak256": "0xb9778d418650d05b798dd2f1302ffc598411908f80296bb6ff391d0017f2a8bb",
        "urls": [
          "bzz-raw://d3923a80ad02e77ba413caef2d4f71c7494bf8a3fd5fda753075310dbb9fe4b4",
          "dweb:/ipfs/QmYieD4jEHcbvVrRQPZ5VBScDZfGdeZWbFvkxDhnezNXR1"
        ],
        "license": "GPL-3.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/interfaces/IAggregator.sol",
    "id": 3507,
    "exportedSymbols": {
      "IAggregator": [
        3506
      ],
      "UserOperation": [
        3892
      ],
      "UserOperationLib": [
        4067
      ],
      "calldataKeccak": [
        2891
      ]
    },
    "nodeType": "SourceUnit",
    "src": "36:1810:8",
    "nodes": [
      {
        "id": 3474,
        "nodeType": "PragmaDirective",
        "src": "36:24:8",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".12"
        ]
      },
      {
        "id": 3475,
        "nodeType": "ImportDirective",
        "src": "62:29:8",
        "nodes": [],
        "absolutePath": "contracts/interfaces/UserOperation.sol",
        "file": "./UserOperation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3507,
        "sourceUnit": 4068,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3506,
        "nodeType": "ContractDefinition",
        "src": "137:1708:8",
        "nodes": [
          {
            "id": 3486,
            "nodeType": "FunctionDefinition",
            "src": "439:124:8",
            "nodes": [],
            "documentation": {
              "id": 3477,
              "nodeType": "StructuredDocumentation",
              "src": "165:269:8",
              "text": " Validate aggregated signature.\n Revert if the aggregated signature does not match the given list of operations.\n @param userOps   - Array of UserOperations to validate the signature for.\n @param signature - The aggregated signature."
            },
            "functionSelector": "e3563a4f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "validateSignatures",
            "nameLocation": "448:18:8",
            "parameters": {
              "id": 3484,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3481,
                  "mutability": "mutable",
                  "name": "userOps",
                  "nameLocation": "501:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 3486,
                  "src": "476:32:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserOperation_$3892_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct UserOperation[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3479,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3478,
                        "name": "UserOperation",
                        "nameLocations": [
                          "476:13:8"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3892,
                        "src": "476:13:8"
                      },
                      "referencedDeclaration": 3892,
                      "src": "476:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserOperation_$3892_storage_ptr",
                        "typeString": "struct UserOperation"
                      }
                    },
                    "id": 3480,
                    "nodeType": "ArrayTypeName",
                    "src": "476:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserOperation_$3892_storage_$dyn_storage_ptr",
                      "typeString": "struct UserOperation[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3483,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "533:9:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 3486,
                  "src": "518:24:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3482,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "518:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "466:82:8"
            },
            "returnParameters": {
              "id": 3485,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "562:0:8"
            },
            "scope": 3506,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 3495,
            "nodeType": "FunctionDefinition",
            "src": "1183:128:8",
            "nodes": [],
            "documentation": {
              "id": 3487,
              "nodeType": "StructuredDocumentation",
              "src": "569:609:8",
              "text": " Validate signature of a single userOp.\n This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n @param userOp        - The userOperation received from the user.\n @return sigForUserOp - The value to put into the signature field of the userOp when calling handleOps.\n                        (usually empty, unless account and aggregator support some kind of \"multisig\"."
            },
            "functionSelector": "64c530cd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "validateUserOpSignature",
            "nameLocation": "1192:23:8",
            "parameters": {
              "id": 3491,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3490,
                  "mutability": "mutable",
                  "name": "userOp",
                  "nameLocation": "1248:6:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 3495,
                  "src": "1225:29:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserOperation_$3892_calldata_ptr",
                    "typeString": "struct UserOperation"
                  },
                  "typeName": {
                    "id": 3489,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3488,
                      "name": "UserOperation",
                      "nameLocations": [
                        "1225:13:8"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3892,
                      "src": "1225:13:8"
                    },
                    "referencedDeclaration": 3892,
                    "src": "1225:13:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UserOperation_$3892_storage_ptr",
                      "typeString": "struct UserOperation"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1215:45:8"
            },
            "returnParameters": {
              "id": 3494,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3493,
                  "mutability": "mutable",
                  "name": "sigForUserOp",
                  "nameLocation": "1297:12:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 3495,
                  "src": "1284:25:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3492,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1284:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1283:27:8"
            },
            "scope": 3506,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 3505,
            "nodeType": "FunctionDefinition",
            "src": "1709:134:8",
            "nodes": [],
            "documentation": {
              "id": 3496,
              "nodeType": "StructuredDocumentation",
              "src": "1317:387:8",
              "text": " Aggregate multiple signatures into a single value.\n This method is called off-chain to calculate the signature to pass with handleOps()\n bundler MAY use optimized custom code perform this aggregation.\n @param userOps              - Array of UserOperations to collect the signatures from.\n @return aggregatedSignature - The aggregated signature."
            },
            "functionSelector": "275e2d79",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "aggregateSignatures",
            "nameLocation": "1718:19:8",
            "parameters": {
              "id": 3501,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3500,
                  "mutability": "mutable",
                  "name": "userOps",
                  "nameLocation": "1772:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 3505,
                  "src": "1747:32:8",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserOperation_$3892_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct UserOperation[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3498,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3497,
                        "name": "UserOperation",
                        "nameLocations": [
                          "1747:13:8"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3892,
                        "src": "1747:13:8"
                      },
                      "referencedDeclaration": 3892,
                      "src": "1747:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserOperation_$3892_storage_ptr",
                        "typeString": "struct UserOperation"
                      }
                    },
                    "id": 3499,
                    "nodeType": "ArrayTypeName",
                    "src": "1747:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserOperation_$3892_storage_$dyn_storage_ptr",
                      "typeString": "struct UserOperation[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1737:48:8"
            },
            "returnParameters": {
              "id": 3504,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3503,
                  "mutability": "mutable",
                  "name": "aggregatedSignature",
                  "nameLocation": "1822:19:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 3505,
                  "src": "1809:32:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3502,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1809:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1808:34:8"
            },
            "scope": 3506,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IAggregator",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3476,
          "nodeType": "StructuredDocumentation",
          "src": "93:43:8",
          "text": " Aggregated Signatures validator."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          3506
        ],
        "name": "IAggregator",
        "nameLocation": "147:11:8",
        "scope": 3507,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0"
  },
  "id": 8
}